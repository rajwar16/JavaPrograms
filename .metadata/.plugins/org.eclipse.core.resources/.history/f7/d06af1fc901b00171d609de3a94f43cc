package com.Bridgelabz.utility;

public class UtilitySort 
{
	/**
	 * sort Integer Array
	 * @param intArr
	 * @return
	 */
	public int[] bubbleSort(int[] intArr)
	{
		for(int i=0;i<intArr.length;i++)
		{
			for(int j=0;j<intArr.length-1;j++)
			{
				if(intArr[j]>intArr[j+1])
				{
					int temp=intArr[j];
					intArr[j]=intArr[j+1];
					intArr[j+1]=temp;
				}
			}
		}
		return intArr;

	}

	/**
	 * sort String Array
	 * @param strArr
	 * @return
	 */
	public String[] bubbleSort(String[] strArr)
	{
		for(int i = 0; i < strArr.length; i++) 
		{
		    for(int j = 0; j < strArr.length-1; j++) 
		    {
		        if(strArr[j].compareTo(strArr[j + 1]) > -1) 
		        {
		            String temp = strArr[j];
		            strArr[j] = strArr[j + 1];
		            strArr[j + 1] = temp;
		        }
		    }
		}
		
		return strArr;
	}


	/**
	 * sort float Array
	 * @param float array
	 * @return float array
	 */
	public float[] bubbleSort(float[] floatArr) 
	{
		for(int i=0;i<floatArr.length;i++)
		{
			for(int j=0;j<floatArr.length-1;j++)
			{
				if(floatArr[j]>floatArr[j+1])
				{
					float temp=floatArr[j];
					floatArr[j]=floatArr[j+1];
					floatArr[j+1]=temp;
				}
			}
		}
		return floatArr;
	}

	/**
	 * sort integer Array
	 * @param intArr
	 * @return
	 */
	public int[] binarySearch(int[] intArr) {

		return intArr;

	}

	public String[] binarySearch(String[] strArr)
	{

		return strArr;

	}

	public float[] bubbleSort(double[] doubleArr) {
		return null;
	}

}
